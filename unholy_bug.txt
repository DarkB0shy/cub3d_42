                                                                                                    UNHOLY_BUG


It's either ignorable OR addressable. When the player spawns at the corner of map:
game->ray.line_height = -2147483648 @ render_line.c/33 when it divides TEXTURE_SIZE, because
game->ray.perp_wall_dist = 0 when it divides HEIGHT @ casting_ray.c/92. That value is set only if game->ray.side == 0 @
                                casting_ray.c/82. game->ray.side = 0 is set inside the if condition @ casting_ray.c/56.
                                That if is executed only when game->ray.side_dist.x < game->ray.side_dist.y.

The value of those parameters is set inside the dda_part_one function inside casting_ray.c. In addition to that, when the map is
not rendered those values are both < 0. The if conditions are @ casting_ray.c/26 and /38.

        FOV : 42

INTERESTING FACT:       when player spawns at any corner of the map game->ray.side_dist.x & game->ray.delta_dist.x have got the
                        same exact value and therefore game->ray.perp_wall_dist equals 0. But the interesting part is, at some 
                        point both of those values get very high (both exactly 1523.809524) and after that the rendering is swell.
                        Actually after that game->ray.side_dist.x = game->ray.delta_dist.x + 5.999250. Oh and 
                        game->ray.delta_dist.x = that's right 5.999250.
                        After that iteration, game->ray.delta_dist.x is still game->ray.side_dist.x / 2 with a Marvin of error of
                        0.000001.

By adding these two lines of code @ casting_ray.c/83:
		if (game->ray.side_dist.x == game->ray.delta_dist.x)
			game->ray.delta_dist.x = game->ray.side_dist.x / 2.00000;
The program encounters a segmentation fault @ render_line/41. But when those lines of code that were just added become comments 
and a debugger is used, game->ray.draw_start.y = -1073741464 @ render_line/37. Therefore the program does not execute the
"rendering loop". This leads to a condition @ casting_ray/100 that when commented causes the program to crash, sometimes. That
happens more often when you are very close to a wall.

VALUES after game->ray.side_dist.x && game->ray.delta_dist.x == 1523.809524
        game->ray.side_dist.x           game->ray.delta_dist.x
                11.998500                       5.999250 (exact half of first value)
                11.951447                       5.975724 (half of first value is 5.97572535)
                11.904762                       5.952381 (exact half)
                    .                               .
                    .                               .
                    .                               .
                10.025063                       5.012531

Feels like the program does not render what's there when delta_dist.x is side_dist.x / 2 or maybe it renders and draws more walls
on top of those.

if (game->ray.side_dist.x == game->ray.delta_dist.x)
	game->ray.side = 2 ;

This (casting_ray.c/63) avoids executing "useless" istructions when those values are the same. 1523 value stopped appearing. I
also addedd a condition inside get_line_dim (casting_ray.c) that handles game->ray.side == 2. It just returns ;
This made the rendering a bit better but it's still not showing the wall the player "spawned into".
